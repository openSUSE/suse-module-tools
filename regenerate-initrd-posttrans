#!/bin/sh
#
# Packages that install kernels or kernel-modules create a flag
#
#   /run/regenerate-initrd/<kernel image>
# 
# to have the initrd for <kernel image> generated, or
#
#   /run/regenerate-initrd/all
#
# to have all initrds generated. This script is called from posttrans
# and takes care of generating the initrds

: ${DRACUT:=/usr/bin/dracut}
if [ ! -x "$DRACUT" ]; then
    echo "${0##*/}: dracut is not installed, not rebuilding the initrd" >&2
    exit 0
fi

dir=/run/regenerate-initrd

if ! test -d "$dir"; then
	exit 0
fi
for f in "$dir"/*; do
	case $f in
	    "$dir/*")
		[ -e "$f" ] || break;;
	esac
	# check if we are in a build chroot
	if ! [  -f /etc/fstab -a ! -e /.buildenv -a -x "$DRACUT" ] ; then
		echo "Please run \"$DRACUT -f --regenerate-all\" as soon as your system is complete." >&2
		rm "$dir"/*
		exit 0
	fi
	break
done

tmpdir=$(mktemp -d /var/tmp/r-i-p-XXXXXX)
[ -n "$tmpdir" ] && [ -d "$tmpdir" ] || {
    echo "error: failed to create temporary directory" >&2
    exit 1
}
trap 'rm -rf "$tmpdir"' 0

start_dracut() {
    local kver=$1 x pid
    if [ x"$RIP_PARALLEL" != x1 ]; then
	if ! "$DRACUT" -f "/boot/initrd-$kver" "$kver"; then
	    err=$?
	fi
    else
	"$DRACUT" -f "/boot/initrd-$kver" "$kver" >"$tmpdir/dracut-$kver.log" 2>&1 &
	pid=$!
	echo "$DRACUT started for $kver with pid $pid" >&2
	ln -s dracut-$kver.log "$tmpdir/$pid.log"
	PIDS="$PIDS $pid"
    fi
}

wait_for_dracut() {
    local pid err=$1

    for pid in $PIDS; do
	wait $pid
	if [ $? -ne 0 ]; then
	    err=$?
	    echo "$DRACUT($pid) failed" >&2
	else
	    echo "$DRACUT($pid) successful" >&2
	fi
	[[ ! -f "$tmpdir/$pid.log" ]] || cat "$tmpdir/$pid.log"
    done
    return $err
}

err=0
PIDS=""

if test -e "$dir/all"; then
    rm "$dir"/*
    PIDS=""
    for f in /lib/modules/*; do
	[ -f "$f/modules.dep" ] || [ -f "$f/modules.dep.bin" ] || continue
	kver=${f##*/}
	start_dracut "$kver"
    done
    wait_for_dracut "$err"
    exit $?
fi

for f in "$dir"/*; do
	case $f in
	    "$dir/*")
		[ -e "$f" ] || break;;
	esac
	rm -f "$f"
	kver=${f##*/}
	[ -d /lib/modules/"$kver" ] || {
	    echo $0: skippping invalid kernel version "$dir/$kver"
	    continue
	}
	start_dracut "$kver"
done
wait_for_dracut "$err"
exit $?
